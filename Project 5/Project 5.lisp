(defun generate-valid-moves-sub (node list)
    (if ((caddr node) equals #\r)
        (let ((correctedNode (list (abs (- (car node) 3)) (abs (- (cadr node) 3)) #\l)))
            (generate-valid-moves-sub correctedNode list)
        )
    )
    (let (  (missionaries (car node))
            (cannibals (cadr node))
            (boat (caddr node))
            (newList list)
         )
        (if (and (<= missionaries 3) (<= cannibals 3) (>= missionaries 0) (>= cannibals 0))
            (if (and (or (and (= missionaries 0) (= cannibals 0)) (and (>= missionaries cannibals) (>= (- 3 missionaries) (- 3 cannibals))))
                     (not (member node list)))
                (let ((newList (cons node list)))
                    (if (and (= missionaries 0) (= cannibals 0))
                        (list newList)
                        (let ((newBoat (if (eq boat #\l) #\r #\l)))
                            (append (generate-valid-moves-sub (list missionaries cannibals newBoat) newList)
                                    (generate-valid-moves-sub (list (abs (- missionaries 1)) cannibals newBoat) newList)
                                    (generate-valid-moves-sub (list missionaries (abs (- cannibals 1)) newBoat) newList)
                                    (generate-valid-moves-sub (list (abs (- missionaries 2)) cannibals newBoat) newList)
                                    (generate-valid-moves-sub (list missionaries (abs (- cannibals 2)) newBoat) newList)
                                    (generate-valid-moves-sub (list (abs (- missionaries 1)) (abs (- cannibals 1)) newBoat) newList)
                            )
                        )
                    )
                )
            )
        )
    )
)